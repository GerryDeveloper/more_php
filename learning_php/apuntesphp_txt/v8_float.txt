Flotantes son los numeros que tienen puntos decimales

floating point numbers are the numbers thaht have decimal points
la notacion exponencial/cientifica: 
  10e3
  103-3

- tambien cuenta como float, incluso la positiva aunque no tenga decimales

===========
tambien puedes tener guiones bajos dentro de tus numero para mejorar la legibilidad:
1_000_000 = 1000000, esto es solo una ayuda visual

========
el size de los float depende de la plataforma
puedes checarlo usando las constantes
-PHP_FLOAT_MAX
-PHP_FLOAT_MIN

===========
Aware of presicion

cuando se trabaja con flotantes lo primero a tener en cuenta es la presicion

echo geth2('Presicion Float en PHP');

$x = floor((0.1 + 0.7) * 10); // 7
echo $x . '<br>';

- recordar que al guardar 0.1 + 0.7 lo hace en binario 
- 0.1 y 0.7 no tienen una representacion exacta en binario, por tanto se pierde presicion
- binario se usa de manera interna para almacenar los flotantes

- ahora al guardar el numero "0.8" en realidad guarda: 7.999... y mas 
  por tanto al hacer floor se deshace de toda la parte fraccionaria

  $x = ceil((0.1 + 0.3) * 10); // 4
echo 'resultado usando ceil(): ' . $x . '<br>';

- en este caso se esperaria un 3 de salida, pero el resultado de sumar 0.1 + 0.2
  es 0.3000000000..4 y al multiplicar por 10 queda 3.000....4, ese ultimo digito 
  es el causante de que se redondee al siguiente entero hacia "arriba" que es el 4

- en resumen, no confies en flotantes.

============
- nunca comparar decimales usando igualdad

=====
constantes NAN, INF

- NAN resultado de una expresion que no puede ser computada, como log(-1)
- INF se consigue saliendo de los limites de float PHP_FLOAT_MAX * 2 resultara en INF
  esto debido a que el numero no puede ser computado

- nunca debes comparar directamente para saber si una variable es NAN o INF respectivamente
- en su lugar usa las built-in funcions: isnan(), isinf()